package rox.warpstone;

import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumChatFormatting;
import net.minecraft.util.EnumFacing;
import net.minecraft.world.World;

public class ItemWarpStone extends Item{
	//Blank item
	public static Item warp_stone;
	
	//Called in Core to initialize the item. Rendering is handled in ClientProxy.
	public static void init(){
		//Tells the blank item to pull code from this class.
		warp_stone = new ItemWarpStone()
			//Some settings for the item.
			
			//The name of the item when referred to by commands and the .lang file.
			.setUnlocalizedName("warp_stone")
			//Stack size, this item will take damage as it's used, so keep this at 1.
			.setMaxStackSize(1)
			//The max amount of damage the item can take.
			//The amount of times an item can be used is always 1 more than is set.
			.setMaxDamage(31)
			//Assigns a creative tab. Since this mod only has one item, I'm assigning
			//it to a vanilla tab; Tools.
			.setCreativeTab(CreativeTabs.tabTools);
	}
	
	@Override
	public boolean onItemUse(ItemStack stack, EntityPlayer player, World world, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ){
		//Only bind if the player is sneaking.
		if(player.isSneaking()){
			//Create the tag if it doesn't exist.
			if(stack.getTagCompound() == null){
				stack.setTagCompound(new NBTTagCompound());
			}
			
			//Stores the dimension ID, X, Y and Z coordinates to the tag.
			NBTTagCompound nbt = new NBTTagCompound();
			nbt.setInteger("dim", player.dimension);
			nbt.setInteger("x", pos.getX());
			nbt.setInteger("y", pos.getY());
			nbt.setInteger("z", pos.getZ());
			//Assigns the tag to the item.
			stack.getTagCompound().setTag("coords", nbt);
			
			//Tells the player that the warp stone was bound successfully.
			Methods.tellPlayer(player, (EnumChatFormatting.GREEN + "Location bound!"));
		}
		
		return true;
	}
	
	@Override
	public ItemStack onItemRightClick(ItemStack stack, World world, EntityPlayer player){
		//Make sure the player isn't sneaking so that they don't teleport when they want to bind the stone.
		if(!player.isSneaking()){
			//Make sure that the tag exists, otherwise things break.
			if(stack.getTagCompound() != null){
				//Make sure that "coords" exists in the tag, since that's what I'm pulling from.
				//I don't think I have to do this here, though it's a good habit to form for later.
				if(stack.getTagCompound().hasKey("coords")){
					//Reassigning the tag to "nbt".
					NBTTagCompound nbt = (NBTTagCompound) stack.getTagCompound().getTag("coords");
					//Setting up the integers here too.
					int dim = nbt.getInteger("dim");
					int x = nbt.getInteger("x");
					int y = nbt.getInteger("y");
					int z = nbt.getInteger("z");
					
					//Checking if the player is in the same dimension that the stone is bound to.
					if(dim == player.worldObj.provider.getDimensionId()){
						//Teleporting the player to the marked position, X and Z incremented by half a block so
						//that the player teleports onto the center of the block, and increasing the Y by 1 so
						//that the player is put on top of the bound block.
						player.setPositionAndUpdate(x+0.5, y+1, z+0.5);
						//Plays the enderman teleport sound on the bound location after the player is warped.
						world.playSoundEffect(x+0.5, y+0.5, z+0.5, "mob.endermen.portal", 0.5F, 0.8F);
						//Take 1 off of the warp stone's durability.
						stack.damageItem(1, player);
					}
					else{
						//If the player isn't in the same dimension as the stone is bound to then
						//tell the player that they can't warp across dimensions.
						Methods.tellPlayer(player, (EnumChatFormatting.RED + "You can't warp across dimensions!"));
					}
				}
			}
		}
		return stack;
	}
}
